<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <title><%= htmlWebpackPlugin.options.title %></title>
</head>
<body>
<div id="preloader">
    <section class="section section-preloader">
        <div class="greeting">
            <h4 class="section__subtitle">
                <span class="text_medium">Приветствуем</span>
                <span>Команда готова реализовать ваши планы</span>
            </h4>
            <a href="#" class="logo">
                <i class="icon icon_logo"></i>
                <span class="logo__text">Art &amp; Data Studio</span>
            </a>
        </div>
    </section>
</div>
<div id="content-overlay"></div>
<div class="grid">
    <div class="grid__col"></div>
    <div class="grid__col grid__col_decor touch-only"></div>
    <div class="grid__col"></div>
    <div class="grid__col grid__col_decor"></div>
    <div class="grid__col"></div>
    <div class="grid__col"></div>
</div>
<script type="text/javascript">
    var hideTimeout = 50000;
    (function () {
        var percents = 0;
        var indicators = document.getElementsByClassName("booting-indicator");
        var grid = document.getElementsByClassName("grid__col");
        var label = document.getElementsByClassName("section__subtitle_percent-number")[0];
        var timer;

        // triggering form PreLoaded component
        window.onBundleLoaded = function () {
            // now control take CSS
            clearTimeout(timer);
            increase = undefined;

            // need some delay for styles
            setTimeout(function () {
                for (var gridItem of grid) {
                    gridItem.classList.add("loaded");

                    const innerItems = gridItem.getElementsByTagName("div");
                    for (var item of innerItems) {
                        item.removeAttribute("style");
                    }
                }
            }, 100);

            // at the last stage it is necessary to finish increasing percents
            var counter = 0;
            (function ending() {
                setTimeout(function () {
                    // searching current visible indicator
                    for (var indicator of indicators) {
                        var height = parseInt(indicator.getBoundingClientRect().height);
                        if (!height) {
                            continue;
                        }
                        // calculate percentage height of indicator
                        label.innerHTML = Math.floor(height / window.innerHeight * 100);
                        counter++;
                    }
                    (counter < (hideTimeout / 50)) && ending();
                }, 50)
            })();
        }

        function increase() {
            timer = setTimeout(function () {
                percents++;
                label.innerHTML = percents;
                // set height to all indicators
                for (var item of grid) {
                    const growItems = item.getElementsByClassName("grow-item");
                    for (var growItem of growItems) {
                        growItem.style.height = (100 - percents) + "%";
                    }
                }
                for (var indicator of indicators) {
                    indicator.style.height = percents + "%";
                }

                increase && (percents < 85) && increase();
            }, percents * (percents / 5));
        }

        increase();
    })();
</script>
</body>
</html>